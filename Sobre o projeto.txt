Dia 1 31/03/2023

Criei a pasta do projeto, criei a virtualenv, instalei o Django, fiz um requirements e intalei o django
 -Comandos:
    -python -m venv venv
    -venv/Scripts/activate
    -pip install django
    -python.exe -m pip install --upgrade pip
    -pip freeze > requirements.txt
    -django-admin startproject setup .
    -python manage.py runserver 8001
Em setting:
   - LANGUAGE_CODE = 'pt-br';  TIME_ZONE = 'America/Sao_Paulo'

 -Comandos:
   - pip install python-dotenv
   - pip freeze > requirements.txt
Criei o.env e colei a secret key lá, em setting:
   from pathlib import Path, os
   from dotenv import load_dotenv
   load_dotenv()
   SECRET_KEY = str(os.getenv('SECRET_KEY'))

Criei o .gitignore e no site https://www.toptal.com/developers/gitignore/ peguei do Django

-Comandos:
   - git init
   - git add .
   - git commit -m "primeiro commit" 
   - git remote add origin https://github.com/AndersonBem/projeto_analise_alimentar.git
   - git push origin master
   - python manage.py startapp diario 

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.diario',
]

Em apps.py dentro de diario, dentro de apps:
from django.apps import AppConfig


class DiarioConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.diario'

Cria a função que renderiza a pagina 
   Em diario.views.py
   from django.http import HttpResponse

E cria o URL da pagina
   diario.urls.py

se criar um novo app precisa criar um novo urls.py nele e incluir no urls.py do setup

Criei a pasta template, com o index lá dentro
criei a pasta static com assets e style lá dentro depois dei um python manage.py collectstatic

No hrf do html coloquei o <link rel="stylesheet" href="{% static '/styles/style.css' %}">
esse é o local onde vai ficar os css, no começo da pagiga html precisa de {% load static %}




Dia 2 04/04/2023

Comando:
   -python manage.py createsuperuser

Criei no models os bancos de dados:

from django.db import models
from django.contrib.auth.models import User

class Registro(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)  # Relaciona o registro ao usuário
    data = models.DateField()
    hora = models.TimeField()

    def __str__(self):
        return f"Registro {self.id} - {self.data} {self.hora}"

class ListaAlimentos(models.Model):
    nome = models.CharField(max_length=255)
    calorias_por_100g = models.DecimalField(max_digits=6, decimal_places=2)

    def __str__(self):
        return self.nome

class AlimentosConsumidos(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)  # Usuário dono do consumo
    registro = models.ForeignKey(Registro, on_delete=models.CASCADE)
    alimento = models.ForeignKey(ListaAlimentos, on_delete=models.CASCADE)
    quantidade = models.DecimalField(max_digits=6, decimal_places=2)  # Quantidade em gramas

    def __str__(self):
        return f"{self.alimento.nome} - {self.quantidade}g"

class Pesagens(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    registro = models.ForeignKey(Registro, on_delete=models.CASCADE)
    peso = models.DecimalField(max_digits=5, decimal_places=2)  # Peso em kg

    def __str__(self):
        return f"Pesagem {self.peso} kg"

class DadosPessoais(models.Model):
    usuario = models.OneToOneField(User, on_delete=models.CASCADE)  # Cada usuário tem um único perfil
    altura = models.DecimalField(max_digits=4, decimal_places=2)  # Altura em metros
    data_nascimento = models.DateField()

    def __str__(self):
        return self.usuario.username


Fiz o template base:
   <!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Minha Aplicação{% endblock %}</title>
    {% load static %}
    <link rel="stylesheet" href="{% static '/styles/style.css' %}">
</head>
<body>
    <header>
        <nav class="menu">
            <button>Botão</button>
            <button>Botão</button>
            <button>Botão</button>
            <button>Botão</button>
            <button>Botão</button>
            <button>Botão</button>
            <button>Botão</button>
            <button>Botão</button>
        </nav>
    </header>

    <main>
        {% block content %}
        <!-- O conteúdo das páginas será inserido aqui -->
        {% endblock %}
    </main>
</body>
</html>

Adaptei o de login:

   {% extends "principal/base.html" %}

{% block title %}Login{% endblock %}

{% block content %}
    <div class="container">
        <h1>Texto</h1>
        
        <form class="login-form" method="POST" action="{% url 'login' %}">
            {% csrf_token %}
            <div class="form-group">
                <label for="login">Login</label>
                <input type="text" id="login" name="login">
            </div>
            <div class="form-group">
                <label for="senha">Senha</label>
                <input type="password" id="senha" name="senha">
            </div>
            <button type="submit">Entrar</button>
        </form> 
    </div>
{% endblock %}

